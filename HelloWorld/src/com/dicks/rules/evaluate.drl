//created on: Jul 25, 2013
package com.dicks.rules

//list any import classes here.
import com.dicks.engine.Order
import com.dicks.engine.Store
import com.dicks.engine.Package
import com.dicks.engine.PackageTest
import com.dicks.engine.PackageTestResult
import com.dicks.engine.ParcelResult
import com.dicks.engine.Parcel
import com.dicks.engine.Product
import com.dicks.engine.Split
import com.dicks.engine.Util
import java.util.ArrayList
import java.util.Arrays;
import java.*;
import java.util.Collections;
import java.util.Collection;
import java.util.Comparator;


//declare any global variables here

rule "Explode Package"
    agenda-group "init"
    auto-focus true
    salience 100
    dialect "java"
    when
        $p : Package()
    then
        System.out.println($p);
//        modify ($order) { setExploredItem($order.getExploredItem() + 1); }
//        System.out.println("order quantity: " + $order.getQuantity());
//        System.out.println("exlored: " + $item.getProductName());
       drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();
end

rule "for splitable packages"
	salience 5
	agenda-group "split"
	when
		$p : Package(isSplitable() && !isAllocated())
	then	
//		System.out.println($p);
		ArrayList r = Split.getTests($p);
//		System.out.println(r.size());
		for (int i = 0; i < r.size(); i++) {
			PackageTest t = (PackageTest) r.get(i);
			insert (t);
			System.out.println("test: " + t);
		}		
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();
end


rule "generate test results"
	salience 4
	agenda-group "split"
	when
		$test : PackageTest(!isTested())
		$pack : Package($test.getPack() == $pack)
		$stores : ArrayList( ) from collect( Store () )
	then	
		PackageTestResult testR = getTestResult($test, $stores);
		if (testR != null) {
			insert(testR);
			modify($pack){ setAllocated(true); }
			System.out.println("test result: " + testR);
		}		
		modify($test){ setTested(true); }
end

rule "add splits"
	salience 3
	agenda-group "split"
	when
		$p : Package(isSplitable() && !isAllocated())
	then
		modify ($p) { setSplitNum($p.getSplitNum() + 1) }
		System.out.println("package: " + $p + " unable to solve, so split num++: " + $p.getSplitNum());
end


rule "for not splitable packages"
	salience 1
	agenda-group "split"
	when
		$p : Package((!$p.isSplitable()) && !isAllocated())
	then
//		System.out.println("split num: " + $p.getSplitNum());
//		System.out.println("product size: " + $p.getProducts().size());
//		System.out.println("eval: " + (($p.getSplitNum() == $p.getProducts().size()&& !$p.isAllocated())));
		System.out.println("Unable to handle this package " + $p + ", handed to vendor");
//		System.out.println("handle this package " + $p);
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "report" ).setFocus();
end


function PackageTestResult getTestResult(PackageTest test, ArrayList stores) {
	PackageTestResult r = new PackageTestResult(test);
	ArrayList parcels = test.getParcels();
	
	for (int i = 0; i < parcels.size(); i++) {
		Parcel p = (Parcel) parcels.get(i);
		ArrayList parcelResults = new ArrayList();
		for (int j = 0; j < stores.size(); j++) {
			Store s = (Store) stores.get(j);
			ParcelResult parcelR = getParcelResult(p, s);
			if (parcelR != null) parcelResults.add(parcelR);
		}
		if (parcelResults.size() < 1) {
			System.out.println("in test result: no result for " + test);
			return null;
		}
		Collections.sort(parcelResults, new Comparator<ParcelResult>() {
			@Override
			public int compare(ParcelResult arg0, ParcelResult arg1) {
				return (int) (arg0.getCost() - arg1.getCost()); 
			}			
		});
		r.addResult((ParcelResult) parcelResults.get(0));
	}
	
	double cost = 0;
	ArrayList parcelResults = r.getResults();
	for (int i = 0; i < parcelResults.size(); i++) {
		cost += ((ParcelResult) parcelResults.get(i)).getCost();
	}
	r.setCost(cost);
	return r;
}

function ParcelResult getParcelResult(Parcel parcel, Store store) {
	if (!store.containParcel(parcel)) return null;

	ParcelResult r = new ParcelResult(parcel);
	r.setSource(store);
	r.setCost(Util.getShippingCosts(parcel.getZoneID(), store.getZoneID()));
	return r;
}

function boolean compare(Parcel p, Store s1, Store s2) {
	return true;
}

