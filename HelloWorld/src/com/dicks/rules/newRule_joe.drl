//created on: Jul 4, 2013
package com.dicks.rules;

//list any import classes here.
import com.dicks.pojo.Orders
import com.dicks.pojo.Product
import com.dicks.pojo.Store

import com.dicks.dao.InventoryDAO
import com.dicks.dao.OrderDetailDAO

import com.dicks.engine.PackageE
import com.dicks.engine.OrderE
import com.dicks.engine.Parcel
import com.dicks.engine.ParcelResult
import com.dicks.engine.PackageTest
import com.dicks.engine.PackageTestResult
import com.dicks.engine.EngineLog
import java.util.ArrayList
import java.*;
import java.String.*;
import java.util.HashMap;
import com.dicks.dao.InventoryDAO;

//declare any global variables here
rule "Explode Cart"
    agenda-group "init"
    auto-focus true
    salience 30
    dialect "java"
    when
        $order : Orders()
        $item : Product() from OrderDetailDAO.getInstance().getProductsByOrder($order)
        $logger : EngineLog()
    then
        insert( $item );
        $logger.addLog("product "+$item.getSku());
        System.out.println("product"+$item.getSku());
//        modify ($order) { setExploredItem($order.getExploredItem() + 1); }
//        System.out.println("order quantity: " + $order.getQuantity());
//        System.out.println("exlored: " + $order.getExploredItem());
       
end

/*rule "get products more than"
	salience 15
	when 
		$product : Product($id: prodId, sku.equals("1"))
		$orderE : OrderE()
		$order : Orders()
		eval ($orderE.getProductQty($id) > 2)
		$s : Store( storeId == 1 )
		eval(InventoryDAO.getInstance().checkProduct($s, $product, ">", $orderE.getProductQty($id)))	
	then
		System.out.println("yes you can!"+$orderE.getProductQty($id));
        PackageE p = new PackageE($order);
        p.addProduct($product);
        insert (p);
        p.setAllocated(true); 
        retract($product);
end	*/



rule  "Special Route0"
    salience 15
    when
        $order : Orders()
        $orderE : OrderE()
        $product : Product($id: prodId, sku.equals("NK-SH-KB"))
        eval ($orderE.getProductQty($id) > 2)
        $s : Store( storeId == 1)
        eval(InventoryDAO.getInstance().checkProduct($s, $product, ">", $orderE.getProductQty($id)))
        $logger: EngineLog()
    then
    	$logger.addLog("special routes for product "+$product.getProdName()+" with quantity "+$orderE.getProductQty($id)+" is successfully allocated");
        System.out.println("special routes for product "+$product.getProdName()+" with quantity "+$orderE.getProductQty($id)+" is successfully allocated");
        PackageE p = new PackageE($order);
        p.addProduct($product, $orderE.getProductQty($id));
        insert (p);
        p.setAllocated(true); 
        Parcel parcel = new Parcel(p);
        parcel.addNumProduct($product, $orderE.getProductQty($id));
        
        PackageTest test = new PackageTest(p);
        test.addParcel(parcel);
        
        ParcelResult parcelR = new ParcelResult(parcel);
        parcelR.setSource($s);
		
        PackageTestResult packageR = new PackageTestResult(test);
        packageR.addResult(parcelR);
        $logger.addLog($product + "get inserted into a new package by speical route rule"); 
        $logger.addLog(packageR.toString());      
        System.out.println(packageR);
        insert(packageR);
        retract(p);
        retract($product);
end


/*rule  "Special routespecial route0"
    when
        $o : Order()
        $i : Product(  ( productID == 4 )|| (productID == 1 )|| (productID == 2 ))
        $s : Store( storeID == a )
        eval($s.checkProduct($i, ">" ,4)
    then
        System.out.println("special routes allocated");
        Package p = new Package($o);
        p.addProduct($i);
        insert (p);
        p.setAllocated(true); 
        retract($i);
end
rule "Explode Cart end"
    agenda-group "init"
    auto-focus true
    salience 8
    dialect "java"
    when
        $order : Order()
    then
        drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "first" ).setFocus();
end
*/

rule "filter stock"
	salience 13
	//agenda-group "first"
    when    	
    	$store : Store()
    	$order : Orders()
    	eval(!InventoryDAO.getInstance().containAnyProductOrder($store, $order))
    	$logger : EngineLog()
    then
    	$logger.addLog("store "+ $store.getStoreId()+ " retracted by rule filter stock");
    	System.out.println("store "+ $store.getStoreId()+ " retracted by rule filter stock");
        retract($store);
end

rule "filter stock2"
	salience 10
	//agenda-group "first2"
    when
    	//$o : Orders()
        $item : Product()
    	$store : Store()
        //eval($store.checkStore($item, $o,"zone","<",2))
        eval(InventoryDAO.getInstance().checkProduct($store, $item,">",2))
        $logger : EngineLog() 
    then
    	$logger.addLog("store "+$store.getStoreId()+ " retracted by rule filter stock2");
    	System.out.println("store "+$store.getStoreId()+ " retracted by rule filter stock2");
        retract($store);
end

/*rule "record stores"
	salience 10
	agenda-group "first"
    when    	
    	$order : Order()
		$store : Store()
    then
    	modify ($order) { addStore($store) }
        retract($store);
end*/

rule  "special 1"
	salience 9
	//agenda-group "special"
	when
        $o : Orders()
        $orderE : OrderE()
        $i : Product(  ( prodId == 3 ))
        $s : Store( storeId == 4 )
        $logger : EngineLog()
        //eval(!$s.checkProduct($i,">",1))
	then
		$logger.addLog("product "+$i.getProdId()+" get inserted into a new package by speical route rule");
		System.out.println("product "+$i.getProdId()+" get inserted into a new package by speical route rule");
        PackageE p = new PackageE($o);
        p.addProduct($i, $orderE.getProductQty($i.getProdId()));
        insert (p);
        p.setAllocated(true); 
        retract($i);
end

rule  "Mininum Packagethreshold0"
	salience 7
	//agenda-group "first6"
    when
        $o : Orders()
        $orderE : OrderE()
//        $i : Product( ((weight > 10)|| ( size > 1))&& (( productID == 1 )|| (productID == 2 )|| (productID == 3 )))from $o.getProducts()
//        $i : Product(weight >= 10 && special == null)
        $i : Product(weight > 2000)
        $logger : EngineLog()
    then     
    	PackageE p = new PackageE($o);
    	p.addProduct($i, $orderE.getProductQty($i.getProdId()));
    	insert (p);    
        $i.minPackage();
        retract($i);
end

rule "insert package for remaining products"
	salience 5
	//agenda-group "first7"
	when
		$i : Product()
		$o : Orders()
		not PackageE(isForRemain())
	then
		PackageE p = new PackageE($o);
		p.setForRemain(true);
		insert (p);
		System.out.println("insert new package");
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();
//		System.out.println("set to next group");
end

rule "wrap up remaining products"
	salience 3
	//agenda-group "first8"
	when
		$i : Product()
		$p : PackageE(isForRemain())
		$orderE : OrderE()
	then
		$p.addProduct($i, $orderE.getProductQty($i.getProdId()));
		retract($i);
		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();
end

/*
rule "set to next group"
	agenda-group "first"
	when
		not Product()
	then
		System.out.println("set to split");
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();		
end


rule "add all packages"
	salience 10
//	agenda-group "split"
	when
		$p : Package()
		$order : Order()
	then
		$order.addPackage($p);
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "report" ).setFocus();
end


rule "for not splitable packages"
	salience 5
//	agenda-group "split"
	when
		$p : Package(getSplitNum() == getProducts().size())
//		$order : Order()
	then
		System.out.println("Unable to handle this package " + $p + ", handed to vendor");
//		System.out.println("handle this package " + $p);
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "report" ).setFocus();
end

rule "for splitable packages"
	salience 4
	agenda-group "split"
	when
		$p : Package(getSplitNum() < getProducts().size() && !isAllocated())
		$order : Order()
	then	
		ArrayList r = Split.getTestResult($p, $order);
		if (r !=  null || r.size() == 0) {
			modify ($p) { setAllocated(true) }
			System.out.println("Get result for " + $p);
		} else {
			modify ($p) { setSplitNum($p.getSplitNum() + 1) }
			System.out.println("cannot solve in split " + $p.getSplitNum());
		}
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "report" ).setFocus();
end*/

/*
rule "for not splitable packages"
	salience 4
	agenda-group "split"
	when
		$p : Package( getSplitNum() == getProducts().size())
	then
		System.out.println("Unable to handle this package " + $p);
end

rule "for splitable packages"
	salience 4
	agenda-group "split"
	when
		$p : Package()
	then
		
		modify ($p) { setSplitNum($p.getSplitNum() + 1) }
		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "report" ).setFocus();
end
*/



rule "summarize"   
//	agenda-group "report"
    when
        store : Store()
    then
        System.out.println("Remaining store"+store.getStoreId());        
end

rule "summarizeProduct"  
//	agenda-group "report" 
    when
        p : Product()
    then
        System.out.println(p.getProdName());        
end

rule "summarizePackage"
//	agenda-group "report"   
    when
        $p : Package()
    then
        System.out.println($p);     
           
end



