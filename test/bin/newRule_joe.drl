//created on: Jul 4, 2013
package com.sample;

//list any import classes here.
import com.sample.Order
import com.sample.Store
import com.sample.Package
import com.sample.Product
import com.sample.PackageTestResult
import java.util.ArrayList
import java.*;
import java.String.*;

//declare any global variables here
rule "Explode Cart"
    agenda-group "init"
    auto-focus true
    salience 30
    dialect "java"
    when
        $order : Order()
        $item : Product() from $order.getProducts()
    then
        insert( $item );
//        modify ($order) { setExploredItem($order.getExploredItem() + 1); }
//        System.out.println("order quantity: " + $order.getQuantity());
//        System.out.println("exlored: " + $order.getExploredItem());


        
        
end

/*
rule "Explode Cart end"
    agenda-group "init"
    auto-focus true
    salience 8
    dialect "java"
    when
        $order : Order()
    then
        drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "first" ).setFocus();
end
*/
rule "test"
	salience 19
	//agenda-group "first"
    when    	
    	
    	$store : Store(StoreID !=5) 
    	
    	
    then
    	$store.change(2);
    	System.out.println("store "+$store.getStoreID()+"value changed"+$store.getValue());
        
end

rule  "Threshold1"
    salience 17
    when
        $o : Order()
        $i : Product( ((weight > 5))&& (( productID.equals("1") )|| (productID.equals("2")  )|| (productID.equals("3")  ))&& (flag.equals("TH-A,ST-A,SP-A")))
    then
    	System.out.print($i.getProductID());
        System.out.println("no flag !!!");
        $i.minPackage();
end

rule  "Speical Route0"
    salience 96
    when
        $o : Order()
        $i : Product( ((weight > 5)|| ( size < 3))&& (( productID.equals("001")))&& (flag.equals("TH-A,ST-A,SP-B")))
    then
        System.out.println("special routes allocated");
        Package p = new Package($o);
        p.addProduct($i);
        insert (p);
        p.setAllocated(true); 
        retract($i);
end



rule "filter stock"
	salience 13
	//agenda-group "first"
    when    	
    	$item : Product()
    	$store : Store()
    	eval(!$store.containProduct($item))  
    then
    	System.out.println("store "+ $store.getStoreID()+ " retracted by rule filter stock");
        retract($store);
end



rule "filter stock2"
	salience 10
	//agenda-group "first2"
    when
    	//$o : Order()
        $item : Product( (( productID.equals("store001"))|| (productID.equals("store13"))|| (productID.equals("store23"))))
        
    	$store : Store()
    	
    	
        //eval($store.checkStore($item, $o,"zone","<",2))
        eval(!$store.checkStore($item,"margin",">",2)) 
        eval(!$store.checkStore($item,"zone",">",2)) 
        eval(!$store.checkStore($item,"zone",">",5))
        
    then
    	
    	System.out.println("store "+$store.getStoreID()+ " retracted by rule filter stock2");
        retract($store);
end

rule  "Store Filter0"
    salience 96
    when
        $item: Product( (( productID.equals("store001")))&& (flag.equals("TH-A,ST-C,SP-A ")))
        $store: Store()
        eval(!$store.checkStore($item, "zone",">",5))
        eval(!$store.checkStore($item, "Safety Stock","<",15))
    then
        retract($store);
end

/*rule "record stores"
	salience 10
	agenda-group "first"
    when    	
    	$order : Order()
		$store : Store()
    then
    	modify ($order) { addStore($store) }
        retract($store);
end*/




rule  "special 1"
	salience 9
	//agenda-group "special"
	when
       $o : Order()
        $i : Product(  ( productID == 3 ))
        $s : Store( storeID == 4 )
        //eval(!$s.checkProduct($i,">",1))
	then
		System.out.println("product "+$i.getProductID()+" get inserted into a new package by speical route rule");
        Package p = new Package($o);
        p.addProduct($i);
        insert (p);
        p.setAllocated(true); 
        retract($i);
end

rule  "Mininum Packagethreshold2"
	salience 7
	//agenda-group "first6"
    when
        $o : Order()
//        $i : Product( ((weight > 10)|| ( size > 1))&& (( productID == 1 )|| (productID == 2 )|| (productID == 3 )))from $o.getProducts()
        $i : Product(weight >= 10 && special == null)
        
    then     
    	Package p = new Package($o);
    	p.addProduct($i);
    	insert (p);    
        $i.minPackage();
        retract($i);
end

rule "insert package for remaining products"
	salience 5
	//agenda-group "first7"
	when
		$i : Product()
		$o : Order()
		not Package(isForRemain())
	then
		Package p = new Package($o);
		p.setForRemain(true);
		insert (p);
		System.out.println("insert new package");
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();
//		System.out.println("set to next group");
end

rule "wrap up remaining products"
	salience 3
	//agenda-group "first8"
	when
		$i : Product()
		$p : Package(isForRemain())
	then
		$p.addProduct($i);
		retract($i);
		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();
end

/*
rule "set to next group"
	agenda-group "first"
	when
		not Product()
	then
		System.out.println("set to split");
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();		
end


rule "add all packages"
	salience 10
//	agenda-group "split"
	when
		$p : Package()
		$order : Order()
	then
		$order.addPackage($p);
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "report" ).setFocus();
end


rule "for not splitable packages"
	salience 5
//	agenda-group "split"
	when
		$p : Package(getSplitNum() == getProducts().size())
//		$order : Order()
	then
		System.out.println("Unable to handle this package " + $p + ", handed to vendor");
//		System.out.println("handle this package " + $p);
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "report" ).setFocus();
end

rule "for splitable packages"
	salience 4
	agenda-group "split"
	when
		$p : Package(getSplitNum() < getProducts().size() && !isAllocated())
		$order : Order()
	then	
		ArrayList r = Split.getTestResult($p, $order);
		if (r !=  null || r.size() == 0) {
			modify ($p) { setAllocated(true) }
			System.out.println("Get result for " + $p);
		} else {
			modify ($p) { setSplitNum($p.getSplitNum() + 1) }
			System.out.println("cannot solve in split " + $p.getSplitNum());
		}
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "report" ).setFocus();
end*/

/*
rule "for not splitable packages"
	salience 4
	agenda-group "split"
	when
		$p : Package( getSplitNum() == getProducts().size())
	then
		System.out.println("Unable to handle this package " + $p);
end

rule "for splitable packages"
	salience 4
	agenda-group "split"
	when
		$p : Package()
	then
		
		modify ($p) { setSplitNum($p.getSplitNum() + 1) }
		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "report" ).setFocus();
end
*/



rule "summarize"   
//	agenda-group "report"
    when
        store : Store()
    then
        System.out.println("Remaining store"+store.getStoreID());        
end

rule "summarizeProduct"  
//	agenda-group "report" 
    when
        p : Product()
    then
        System.out.println(p.getProductName());        
end

rule "summarizePackage"
//	agenda-group "report"   
    when
        $p : Package()
    then
        System.out.println($p);     
           
end



